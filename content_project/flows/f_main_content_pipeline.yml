summary: Master Content Pipeline - Handles new prompts, routes, creates, and sends for approval.
# This flow is triggered by other scripts (like your webhook or manual UI)
# It expects an input called 'user_prompt'
steps:
  - id: load_config
    summary: Load the master YAML config file.
    script:
      language: python
      content: |
        import yaml
        with open("/usr/src/app/content_project/config/model_routing.yaml", "r") as f:
            print("INFO: Loading model_routing.yaml config...")
            return yaml.safe_load(f)

  - id: smart_router
    summary: Classify the prompt's intent.
    script:
      path: ../scripts/router/s_smart_router.ts
      inputs:
        user_prompt: u/inputs.user_prompt
        config_yaml_string: u/JSON.stringify(results.load_config)
        openai_api_key: u/secrets.OPENAI_API_KEY
  
  - id: content_engine_branch
    summary: Execute the correct content generation engine.
    if:
      - condition:
          javascript: return results.smart_router.engine === 'image'
        steps:
          - id: generate_image
            script: ../scripts/engines/s_generate_image.py
            # inputs: u/results.smart_router.params # a more advanced setup
      # ... add more conditions here for 'caption', 'blog_post', etc.
      - else:
          - id: unknown_engine
            script: ../scripts/engines/s_generate_blog_post.py # Default to blog post for now
            inputs:
              idea: { title: "New Idea", concept: u/inputs.user_prompt, hook: "A new hook" }
              
  - id: quality_gate
    summary: Run the draft through the AI quality check.
    script:
      path: ../scripts/meta/s_ai_quality_gate.py
      inputs:
        generated_script: u/results.content_engine_branch.article_markdown # Path to the generated text

  - id: request_human_approval
    summary: If quality gate passes, send for human approval.
    if:
      - condition:
          javascript: return results.quality_gate.decision === 'pass'
        steps:
          - id: send_approval_telegram
            script: ../scripts/publication/s_request_approval.py
            inputs:
              # We need to create the draft object first
              content_draft: u/results.content_engine_branch